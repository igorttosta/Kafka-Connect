SET 'auto.offset.reset' = 'earliest';
--DEFINE oracle_db_name = 'ORAHOM';

CREATE STREAM IF NOT EXISTS STR_USER_INSERT2 (
    after STRUCT <
        ID VARCHAR,
        USER_NAME VARCHAR,
        E_MAIL VARCHAR,
        USER_PASSWORD VARCHAR,
        CPF VARCHAR,
        CEP VARCHAR,
        COUNTRY VARCHAR,
        REGION VARCHAR,
        CITY VARCHAR,
        DISTRICT VARCHAR,
        STREET VARCHAR,
        STREET_NUMBER VARCHAR,
        USER_ESPA VARCHAR
    >,
    op VARCHAR
) WITH (KAFKA_TOPIC='postgresql2.public.USER_INSERT', VALUE_FORMAT='AVRO');

CREATE STREAM IF NOT EXISTS USER_INSERT2_POSTGRES2 AS SELECT 
    after -> ID AS ID,
    after -> USER_NAME AS USER_NAME,
    after -> E_MAIL AS E_MAIL,
    after -> USER_PASSWORD AS USER_PASSWORD,
    after -> CPF AS CPF,
    after -> CEP AS CEP,
    after -> COUNTRY AS COUNTRY,
    after -> REGION AS REGION,
    after -> CITY AS CITY,
    after -> DISTRICT AS DISTRICT,
    after -> STREET AS STREET,
    after -> STREET_NUMBER AS STREET_NUMBER,
    after -> USER_ESPA AS USER_ESPA
FROM STR_USER_INSERT2 WHERE op = 'c' AND after -> USER_ESPA <> '5000';

CREATE STREAM IF NOT EXISTS STR_USER_PURCHASE2_POSTGRES2 (
    after STRUCT <
        ID VARCHAR,
        VALUE_PURCHASE VARCHAR,
        USER_PURCHASE_ESPA VARCHAR,
        USER_ID VARCHAR
    >,
    op VARCHAR
) WITH (KAFKA_TOPIC='postgresql2.public.USER_PURCHASE2', VALUE_FORMAT='AVRO');

CREATE STREAM IF NOT EXISTS USER_PURCHASE2_POSTGRES2 AS SELECT 
    after -> ID AS ID,
    after -> VALUE_PURCHASE AS VALUE_PURCHASE,
    after -> USER_PURCHASE_ESPA AS USER_PURCHASE_ESPA,
    after -> USER_ID AS USER_ID
FROM STR_USER_PURCHASE2_POSTGRES2 WHERE op = 'c' AND after -> USER_PURCHASE_ESPA <> '5000';


CREATE STREAM IF NOT EXISTS UNION_USER AS SELECT
    US.ID AS ID,
    US.USER_NAME AS USER_NAME,
    US.E_MAIL AS E_MAIL,
    US.USER_PASSWORD AS USER_PASSWORD,
    US.CPF AS CPF,
    UPS.VALUE_PURCHASE AS VALUE_PURCHASE,
    US.CEP AS CEP,
    US.COUNTRY AS COUNTRY,
    US.REGION AS REGION,
    US.CITY AS CITY,
    US.DISTRICT AS DISTRICT,
    US.STREET AS STREET,
    US.STREET_NUMBER AS STREET_NUMBER
FROM USER_INSERT2_POSTGRES2 US
    INNER JOIN USER_PURCHASE2_POSTGRES2 UPS 
        WITHIN 7 DAYS ON US.ID = UPS.USER_ID;

CREATE STREAM SINK_USER AS SELECT
	ID AS ID,
    USER_NAME AS USER_NAME,
    E_MAIL AS E_MAIL,
    USER_PASSWORD AS USER_PASSWORD,
    CPF AS CPF,
    6000 AS USER_ESPA
FROM UNION_USER;

CREATE STREAM SINK_USER_ADDRESS AS SELECT
	CPF AS CPF,
    CEP AS CEP,
    COUNTRY AS COUNTRY,
    REGION AS REGION,
    CITY AS CITY,
    DISTRICT AS DISTRICT,
    STREET AS STREET,
    CAST(CAST(STREET_NUMBER AS DOUBLE) AS INT) AS STREET_NUMBER,
    6000 AS USER_ADDRESS_ESPA,
    CAST(CAST(SUP.after -> ID AS DOUBLE) AS INT) AS USER_ID
FROM UNION_USER UU
    INNER JOIN  STR_USER_POSTGRESQL SUP 
        WITHIN 7 DAYS ON UU.CPF = SUP.after-> CPF WHERE SUP.after ->USER_ESPA = '6000';



CREATE STREAM SINK_USER_PURCHASE AS SELECT
    ROWKEY,
    CAST(CAST(UAP.after -> ID AS DOUBLE) AS INT) AS USER_ADDRESS_ID,
    CAST(CAST(UU.VALUE_PURCHASE AS DOUBLE) AS INT) AS VALUE_PURCHASE,
    6000 AS USER_PURCHASE_ESPA
FROM UNION_USER UU
    INNER JOIN  STR_USER_POSTGRESQL SUP 
        WITHIN 7 DAYS ON UU.CPF = SUP.after -> CPF 
    INNER JOIN STR_USER_ADDRESS_POSTGRESQL UAP
        WITHIN 7 DAYS ON UAP.after -> USER_ID = SUP.after -> ID
        WHERE SUP.after ->USER_ESPA = '6000';

